<?php
namespace console\controllers;
/*
 * Project:     Classes Pessl SOAP Wrapper
 * File:        class.pessl_soap.php
 *
 * @copyright 2007 Pessl Instruments Gmbh
 * @author Roman Postovalov <roman.postovalov@metos.at>
*/
require_once('class.pessl_recordset.php');
require_once('nusoap/nusoap.php');
//require_once('nusoapold.php');
//require_once('nusoap.php');
set_time_limit(120);
class PesslSOAPBasic {
	/**
     * Error message.
     *
     * @var string
     * @access   public
     */
	var $error 			= '';
	/**
     * SOAP server or WSDL URL.
     *
     * @var string
     * @access   public
     */
    var $url        =     'http://fieldclimate.com/cidiwsdl.php?wsdl';
    //var $url        =     'http://192.168.98.11/pikernel/actvers/cidiwsdl.php?wsdl&debug=1';
    /**
     * Set to true if using WSDL.
     *
     * @var boolean
     * @access   public
     */
    var $wsdl        =     true;
    /**
     * Set the connection timeout.
     *
     * @var int
     * @access   public
     */
	var $timeout 	=	180;
	/**
     * Set username for access iMetosSOAP.
     *
     * @var string
     * @access   public
     */
	var $username 	= 	'';
	/**
     * Set password for access iMetosSOAP.
     *
     * @var string
     * @access   public
     */
	var $password 	= 	'';
	/**
     * Set row_count.
     *
     * @var int
     * @access   public
     */
	var $row_count 		= 100;
	/**
     * Set debug flag for CIDI interface.
     *
     * @var int 0|1
     * @access   public
     */
	var $debug 			= 0;
	/**
     * Set sort_type.
     *
     * @var int
     * @access   public
     */
	var $sort_type 		= 0;
	/**
     * Object create by New soapclient().
     *
     * @var object
     * @access   private
     */
	var $_soap;
	/**
	  *	 Show user app 
	  * 
	  * @var boolean
	  * @access private
	  * */
	var $show_user_app = false;
/**
 * defines,  data of which application has the highest priority
 * by default, it is weather data and data of other applications is merged according to
 * date/time of the weather data
 * it also defines the behaviour of GetMinMaxDate()
 * If a name of user application is assigned to $master_user_app data generated by this
 * application is read first. Data of other applications is merged with it
 *
 * @var string
 */
    var $master_user_app="weather_data";
	
	/**
	 * Convert PesslRecordset to Array
	 *
	 * @return	array $array_of_rows
     * @access   private
	 *
	 */
	function &_PesslRecordsetToArray(&$date_set_main) {
		$array_of_rows = array();
		$rs  	=  new PesslRecordset($date_set_main);
     	while($row 	= & $rs->FetchRow("assoc")) {
			$array_of_rows[] = & $row;
     	}
  		return $array_of_rows;
	}
	
    /*
     * Create NuSOAP client 
     */
	function create_soap_client() {
		if(isset($this->_soap)){
			return;
		}
	    unset($this->_soap);
	    $this->_soap =  new nusoap_client($this->url, $this->wsdl);
		$this->_soap->response_timeout = $this->timeout;
        $this->_soap->timeout = $this->timeout;
	}
}

class PesslSOAPStationList extends PesslSOAPBasic {
	/**
	 * Current station_code
	 *
	 * @var int
     * @access   private
	 *
	 */
 	var $_station_code;

	/**
	* constructor
	*
	* @param    string $url SOAP server or WSDL URL (string)
	* @access   public
	*/

	function PesslSOAPStationList($url = '') {
		if (!empty($url)) $this->url = $url;
		$this->create_soap_client();
	}

	/**
    * reads first row_count or less stations
    *
    * @return    mixed $station_list
    * @access   public
    */

    function  & PesslSOAPStationListGetFirst() {
        $this->create_soap_client();
        $result =  & $this->_soap->call('cidistationlist_GetFirst',
                          array(
                            'user_name'     => $this->username,
                            'user_passw'    => $this->password,
                            'row_count'     => $this->row_count,
                            'sort_type'     => $this->sort_type,
                            'debug'         => $this->debug,
                            )
                        );

        /* SOAP fault */
         if ($this->_soap->fault){
             $this->error = $result["faultstring"];
							$false=false;return $false;
					}

        /* Set current station code */
        $this->_station_code    = $result['ReturnParams']['station_code'];

		return  $this->_PesslRecordsetToArray($result["DataSetMain"]);
	}

	/**
	* reads next row_count or less stations
	*
	* @return	mixed $station_list
	* @access   public
	*/

    function  & PesslSOAPStationListGetNext() {
        $this->create_soap_client();
    	$result = & $this->_soap->call('cidistationlist_GetNext',
						array(
							'user_name' 	=> $this->username,
							'user_passw' 	=> $this->password,
							'row_count' 	=> $this->row_count,
							'station_code'	=> $this->_station_code,
							'sort_type' 	=> $this->sort_type,
							'debug' 		=> $this->debug,
						    )
						);

		/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		/* Set current station code */
		$this->_station_code	= $result['ReturnParams']['station_code'];

    	return  $this->_PesslRecordsetToArray($result["DataSetMain"]);
    }

 	/**
	* read all stations
	*
	* @return	mixed $station_list
	* @access   public
	*/

	function & PesslSOAPStationListAll() {
        $this->create_soap_client();

        $station_list = array();
  		$result =  & $this->_soap->call('cidistationlist_GetFirst',
  						array(
							'user_name' 	=> $this->username,
							'user_passw' 	=> $this->password,
							'row_count' 	=> $this->row_count,
							'sort_type' 	=> $this->sort_type,
							'debug' 		=> $this->debug)
						);
		/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}
		$rs  	=  new PesslRecordset($result["DataSetMain"]);
     	$row 	= & $rs->FetchRow("assoc");

       	while ($row) {
            $station_list[] = & $row;
  			if(!($row = & $rs->FetchRow("assoc"))) {
					$result = & $this->_soap->call('cidistationlist_GetNext',
						array(
							'user_name' 	=> $this->username,
							'user_passw' 	=> $this->password,
							'row_count' 	=> $this->row_count,
							'station_code'	=> $result['ReturnParams']['station_code'],
							'sort_type' 	=> $this->sort_type,
							'debug' 		=> $this->debug)
						);

					/* SOAP fault */
					if ($this->_soap->fault){
						$this->error = $result["faultstring"];
						$false=false;return $false;
					}

				$rs 	=  new PesslRecordSet($result["DataSetMain"]);
				$row 	= & $rs->FetchRow("assoc");
			}
		}
  		return $station_list;
	}

}

class PesslSOAPStation extends PesslSOAPBasic {
	var $dt_from;
	var $dt_to;
	var $min_date;
	var $max_date;
	var $_eof;
	var $_bof;
	var $_sensors;
	var $station_name;
	/**
	* constructor
	*
	* @param    string $url SOAP server or WSDL URL (string)
	* @access   public
	*/

	function PesslSOAPStation($url = '') {
		if (!empty($url)) $this->url = $url;
		$this->create_soap_client();
	}
	/**
	* reads all sensors of the station
	*
	* @return	mixed $sensors_list
	* @access   public
	*/
	function & PesslSOAPStationSensors() {
        $this->create_soap_client();
	    $result =  & $this->_soap->call('cidistationsensors_Get',
							array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'station_name'	=> $this->station_name,
							    'show_user_app' => $this->show_user_app)
   								);
//   		echo $this->_soap->responseData;die;
		/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}
		return  $this->_PesslRecordsetToArray($result["DataSetMain"]);
	}

	function PesslSoapDataClean(&$data){
		if(!$data){
			return;
		}
		$keys=array_keys($data[0]);
		$keys_del=array();
		foreach($keys as $k){
			if($k!="f_date" && !$this->PesslSOAPGetInfoSensors($k)){
				$keys_del[]=$k;
			}
		}
		if(!$keys_del){
			return $data;
		}
		
		foreach($data as $k=>$v){
			foreach($keys_del as $kd){
				unset($data[$k][$kd]);	
			}
		}
		
	}


	/**
	* reads first row_count or less of weather data entries
	*
	* @return	mixed $station_data
	* @access   public
	*/

   function & PesslSOAPStationDataGetFirst() {
        $this->create_soap_client();
  		$result = & $this->_soap->call('cidistationdata2_GetFirst', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'row_count' 	=> $this->row_count,
								'station_name'	=> $this->station_name,
								'group_code' 	=> $this->group_code,
								'debug' 		=> $this->debug,
  		                        'show_user_app' => $this->show_user_app,
  		                        'master_user_app' => $this->master_user_app)
   								);
		/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		$this->dt_to 		= $result['ReturnParams']['dt_to'];
		$this->dt_from 		= $result['ReturnParams']['dt_from'];
		$this->min_date 	= $result['ReturnParams']['min_date'];
		$this->max_date 	= $result['ReturnParams']['max_date'];
		$this->_eof 		= $result['ReturnParams']['_eof'];
		$this->_bof 		= $result['ReturnParams']['_bof'];

		$ret= $this->_PesslRecordsetToArray($result["DataSetMain"]);
		$this->PesslSoapDataClean($ret);
		return $ret;
   }

	/**
	* reads next row_count or less rows beginning from dt_from If dt_from is not set then works as GetFirst
	*
	* @param    string $dt_from date from begin
	* @return	mixed $station_data
	* @access   public
	*/

	function & PesslSOAPStationDataGetFromDate($dt_from = null) {
        $this->create_soap_client();
 		if (!is_null($dt_from)) $this->dt_from = $dt_from;

 		$result = & $this->_soap->call('cidistationdata2_GetFromDate', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'row_count' 	=> $this->row_count,
								'dt_from'		=> $this->dt_from,
								'station_name'	=> $this->station_name,
								'group_code' 	=> $this->group_code,
								'debug' 		=> $this->debug,
  		                        'show_user_app' => $this->show_user_app,
  		                        'master_user_app' => $this->master_user_app)
   								);
 				/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		$this->dt_to 		= $result['ReturnParams']['dt_to'];
		$this->dt_from 		= $result['ReturnParams']['dt_from'];
		$this->min_date 	= $result['ReturnParams']['min_date'];
		$this->max_date 	= $result['ReturnParams']['max_date'];
		$this->_eof 		= $result['ReturnParams']['_eof'];
		$this->_bof 		= $result['ReturnParams']['_bof'];

		$ret= 	$this->_PesslRecordsetToArray($result["DataSetMain"]);
		$this->PesslSoapDataClean($ret);
		return $ret;
		
   }

	/**
	* reads next row_count or less rows of weather data entries possible scenarios:
	*	1. If dt_to is set (not 0 and not false) then next to dt_to row_count records will be read.
	*	2. If dt_from is set and dt_to is not set then dt_to will be found as date of the record with offset row_count from dt_from
	*		If neither dt_from nor dt_to is set then works as GetFirst
    *
	*
	* @return	mixed $station_data
	* @access   public
	*/

	function & PesslSOAPStationDataGetNext() {
        $this->create_soap_client();
        //echo "<pre>";print_r($this->_soap->debug_str); echo "</pre>";
        	
 		$result = & $this->_soap->call('cidistationdata2_GetNext', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'row_count' 	=> $this->row_count,
								'dt_to'			=> $this->dt_to,
								'station_name'	=> $this->station_name,
								'group_code' 	=> $this->group_code,
								'debug' 		=> $this->debug,
  		                        'show_user_app' => $this->show_user_app,
  		                        'master_user_app' => $this->master_user_app)
   								);
   								
   		
 				/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		$this->dt_to 		= $result['ReturnParams']['dt_to'];
		$this->dt_from 		= $result['ReturnParams']['dt_from'];
		$this->min_date 	= $result['ReturnParams']['min_date'];
		$this->max_date 	= $result['ReturnParams']['max_date'];
		$this->_eof 		= $result['ReturnParams']['_eof'];
		$this->_bof 		= $result['ReturnParams']['_bof'];

		$ret= 	$this->_PesslRecordsetToArray($result["DataSetMain"]);
		$this->PesslSoapDataClean($ret);
		return $ret;
		
   }

 /**
	* reads last row_count or less of weather data entries
	*
	* @return	mixed $station_data
	* @access   public
	*/

  function  & PesslSOAPStationDataGetLast() {
        $this->create_soap_client();
		$result = & $this->_soap->call('cidistationdata2_GetLast', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'row_count' 	=> $this->row_count,
								'station_name'	=> $this->station_name,
								'group_code' 	=> $this->group_code,
								'debug' 		=> $this->debug,
  		                        'show_user_app' => $this->show_user_app,
  		                        'master_user_app' => $this->master_user_app)
   								);
				/* SOAP fault */
		//var_dump($this->_soap);die;   								
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		$this->dt_to 		= $result['ReturnParams']['dt_to'];
		$this->dt_from 		= $result['ReturnParams']['dt_from'];
		$this->min_date 	= $result['ReturnParams']['min_date'];
		$this->max_date 	= $result['ReturnParams']['max_date'];
		$this->_eof 		= $result['ReturnParams']['_eof'];
		$this->_bof 		= $result['ReturnParams']['_bof'];

		$ret= 	$this->_PesslRecordsetToArray($result["DataSetMain"]);
		//$this->PesslSoapDataClean($ret);
		return $ret;
		

  }

 /**
	* reads previous row_count or less rows of weather data entries
	*
	* @return	mixed $station_data
	* @access   public
	*/

  function & PesslSOAPStationDataGetPrev() {
        $this->create_soap_client();
   		$result = & $this->_soap->call('cidistationdata2_GetPrev', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'row_count' 	=> $this->row_count,
								'dt_from'		=> $this->dt_from,
								'station_name'	=> $this->station_name,
								'group_code' 	=> $this->group_code,
								'debug' 		=> $this->debug,
  		                        'show_user_app' => $this->show_user_app,
  		                        'master_user_app' => $this->master_user_app)
   								);
   				/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		$this->dt_to 		= $result['ReturnParams']['dt_to'];
		$this->dt_from 		= $result['ReturnParams']['dt_from'];
		$this->min_date 	= $result['ReturnParams']['min_date'];
		$this->max_date 	= $result['ReturnParams']['max_date'];
		$this->_eof 		= $result['ReturnParams']['_eof'];
		$this->_bof 		= $result['ReturnParams']['_bof'];

		$ret= 	$this->_PesslRecordsetToArray($result["DataSetMain"]);
		$this->PesslSoapDataClean($ret);
		return $ret;
		
  }

  /**
	* returns dates of first and last data entry
	*
	* @return	mixed
	* @access   public
	*/

  function PesslSOAPStationDataGetMinMaxDate() {
        $this->create_soap_client();
   		$result = & $this->_soap->call('cidistationdata_GetMinMaxDate', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'station_name'	=> $this->station_name,
								'debug' 		=> $this->debug,
  		                        'show_user_app' => $this->show_user_app,
  		                        'master_user_app' => $this->master_user_app)
   		);
		/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		return  $result["ReturnParams"];
  }

  /**
	* provides interface to read config params connected to a station
	*
	* @return	mixed
	* @access   public
	*/

 function PesslSOAPStationConfig() {
        $this->create_soap_client();
		$result = & $this->_soap->call('cidistationconfig2_Get', array(
								'user_name' 	=> $this->username,
								'user_passw' 	=> $this->password,
								'station_name'	=> $this->station_name,
								'debug' 		=> $this->debug)
   								);
		/* SOAP fault */
		if ($this->_soap->fault){
			$this->error = $result["faultstring"];
			$false=false;return $false;
		}

		return  $this->_PesslRecordsetToArray($result["DataSetMain"]);
 }

 /**
	* get info about sensors , if sensor_field equal null then return info about all sensors
	*
	* @return	mixed
	* @access   public
	*/

	function PesslSOAPGetInfoSensors($sensor_field) {
        $this->create_soap_client();
		if (!isset($this->_sensors)) {
			$sensors = & $this->PesslSOAPStationSensors();

			for ($i=0; $i < count($sensors); $i++) {
				$this->_sensors[$sensors[$i]["f_sensor_ch"]."_".$sensors[$i]["f_sensor_code"]] = $sensors[$i];
			}
		}

//		echo "<br/>$sensor_field<br/>";
		$sensor_field_split = split("_", $sensor_field);
		if (count($sensor_field_split) == 4) {
			$sensor_ch 	 = $sensor_field_split[2];
	 		$sensor_code = $sensor_field_split[3];
//			echo "<br/>".$sensor_ch."_".$sensor_code ."<br/>";
			if(!isset($this->_sensors[$sensor_ch."_".$sensor_code])){
				return false;
			}
	 		$ret=$this->_sensors[$sensor_ch."_".$sensor_code];
			$ret["f_aggr"]=$sensor_field_split[1];
			return $ret;
		}
	return false;
	}

}
?>